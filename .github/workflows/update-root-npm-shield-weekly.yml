name: Update npm shields in root README

on:
  schedule:
    - cron: "38 5 * * 3" # every Wed @ 5:38 AM
  workflow_dispatch:

permissions:
  contents: read

jobs:
  update-root-npm-shields:
    runs-on: ubuntu-latest
    env:
      TZ: PST8PDT
    
    steps:

      - name: Checkout adamlui/minify.js
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.REPO_SYNC_PAT }}
          path: adamlui/minify.js
      
      - name: Fetch/sum npm download counts
        run: |
          NPM_PKGS=("@adamlui/minify.js" "gulp-minify.js")

          expand_num() { # expand nums abbreviated w/ 'k' or 'm' suffix to integers
            local num=$(echo "$1" | tr '[:upper:]' '[:lower:]') # convert to lowercase
            if [[ $num =~ k$ ]] ; then
              num="${num%k}" # remove 'k' suffix
              num=$(awk "BEGIN { printf \"%.0f\", $num * 1000 }") # multiply by 1000
            elif [[ $num =~ m$ ]] ; then
              num="${num%m}" # remove 'm' suffix
              num=$(awk "BEGIN { printf \"%.0f\", $num * 1000000 }") # multiply by 1000000
            fi ; echo "$num"
          }

          format_total() {
            local num=$1 ; first_digit="${num:0:1}" second_digit="${num:1:1}"
            second_digit=$(( second_digit < 5 ? 0 : 5 )) # round 2nd digit down
            if (( num >= 1000000000 )) ; then # 1B+ w/ one decimal place
              formatted_num="$(( num / 1000000000 ))"
              remainder=$(( (num % 1000000000) / 100000000 ))
              if (( remainder != 0 )) ; then formatted_num+=".$remainder" ; fi
              formatted_num+="B+"
            elif (( num >= 10000000 )) ; then # abbr 10,000,000+ to 999,000,000+
              formatted_num=$(printf "%'.f+" $((( num / 1000000 ) * 1000000 )))
            elif (( num >= 1000000 )) ; then # abbr 1,000,000+ to 9,500,000+
              formatted_num="${first_digit},${second_digit}00,000+"
            elif (( num >= 100000 )) ; then # abbr 100,000+ to 950,000+
              formatted_num="${first_digit}${second_digit}0,000+"
            elif (( num >= 10000 )) ; then # abbr 10,000+ to 90,000+
              formatted_num="${first_digit}0,000+"
            elif (( num >= 1000 )) ; then # abbr 1K to 9.9K
              formatted_num="$(( num / 1000 ))"
              remainder=$(( (num % 1000) / 100 ))
              if (( remainder != 0 )) ; then formatted_num+=".$remainder" ; fi
              formatted_num+="K"
            else formatted_num="$num" ; fi # preserve <1K as is
            echo "$formatted_num"
          }

          # Fetch/sum npm download counts
          for pkg in "${NPM_PKGS[@]}" ; do
            pkg_downloads=$(curl -s "https://img.shields.io/npm/dm/$pkg.svg" |
              sed -n 's/.*<title>downloads: \([0-9,.km]\+\).*<\/title>.*/\1/Ip')
            pkg_downloads=$(expand_num "$pkg_downloads")
            echo "$pkg npm downloads: $pkg_downloads"
            total_downloads=$((total_downloads + pkg_downloads))
          done ; echo -e "\n-----\nTotal monthly npm downloads: $total_downloads\n-----\n"

          # Format total
          formatted_total_downloads=$(format_total "$total_downloads")
          echo "Formatted total monthly npm downloads: $formatted_total_downloads"

          # Expose total for update step next
          echo "TOTAL_DOWNLOADS=$formatted_total_downloads" >> $GITHUB_ENV
      
      - name: Update README shield
        run: |
          cd ${{ github.workspace }}/adamlui/minify.js
          TOTAL_DOWNLOADS="${{ env.TOTAL_DOWNLOADS }}"

          # Update npm shield
          if [ "$TOTAL_DOWNLOADS" == "0" ] ; then echo "Error getting total npm downloads"
          else
            old_readme=$(<docs/README.md)
            sed -i -E "s|(badge/Downloads-)[0-9.,km+]+|\1$TOTAL_DOWNLOADS|Ig" docs/README.md
            new_readme=$(<docs/README.md)
            if [ "$old_readme" != "$new_readme" ] ; then downloads_updated=true ; fi
            if [ "$downloads_updated" = true ] ; then echo "npm shield updated to $TOTAL_DOWNLOADS"
            else echo "npm shield already up-to-date" ; fi
          fi
 
          # Set Updated flag to check in subseuqent steps
          if [ "$downloads_updated" = true ] ; then echo "SHIELD_UPDATED=true" >> $GITHUB_ENV ; fi

      - name: Config committer
        if: env.SHIELD_UPDATED == 'true'
        run: |
          gpg --batch --import <(echo "${{ secrets.GPG_PRIVATE_KEY }}")
          git config --global commit.gpgsign true
          git config --global user.name "kudo-sync-bot"
          git config --global user.email "auto-sync@kudoai.com"
          git config --global user.signingkey "${{ secrets.GPG_PRIVATE_ID }}"

      - name: Push changes to adamlui/minify.js
        if: env.SHIELD_UPDATED == 'true'
        run: |
          cd ${{ github.workspace }}/adamlui/minify.js
          git pull # again to sync w/ concurrent workflow updates
          git add .
          git commit -n -m "Updated npm shield counter in root readme" || true
          git push
